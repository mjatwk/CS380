#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec4 ShadowCoord;

// Ouput data
layout(location = 0) out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
//uniform sampler2DShadow shadowMap;
uniform sampler2D shadowMap;

void main(){

	// Light emission properties
	vec3 LightColor = vec3(1,1,1);
	
	// Material properties
	vec3 MaterialDiffuseColor = texture( myTextureSampler, UV ).rgb;

	//float visibility = texture( shadowMap, vec3(ShadowCoord.xy, (ShadowCoord.z)/ShadowCoord.w) );

        vec3 ShadowXYZ = (ShadowCoord.xyz / ShadowCoord.w);

        float visibility = 1.0;
        float offset = 0.005;
        if (texture( shadowMap, ShadowXYZ.xy ).r < ShadowXYZ.z - offset) {
            visibility = 0.0;
        }

	color = visibility * MaterialDiffuseColor * LightColor;
}
